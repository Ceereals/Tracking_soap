/* soapStub.h
   Generated by gSOAP 2.8.44 for calc.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>
#define SOAP_NAMESPACE_OF_ns1	"http://webservices.averittexpress.com/TransitTimeService"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20844
# error "GSOAP VERSION 20844 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns1__getTransitTime;	/* calc.h:149 */
class ns1__AVTTransitTimeRequest;	/* calc.h:152 */
class ns1__getTransitTimeResponse;	/* calc.h:155 */
class ns1__AVTTransitTimeResponse;	/* calc.h:158 */
struct __ns1__getTransitTime;	/* calc.h:475 */

/* calc.h:149 */
#ifndef SOAP_TYPE_ns1__getTransitTime
#define SOAP_TYPE_ns1__getTransitTime (11)
/* complex XSD type 'ns1:getTransitTime': */
class SOAP_CMAC 
	ns1__getTransitTime {
      public:
        /// Required element 'arg0' of XSD type 'ns1:AVTTransitTimeRequest'
        ns1__AVTTransitTimeRequest *arg0;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__getTransitTime
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__getTransitTime; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__getTransitTime, default initialized and not managed by a soap context
        virtual ns1__getTransitTime *soap_alloc(void) const { return SOAP_NEW(ns1__getTransitTime); }
      public:
        /// Constructor with initializations
        ns1__getTransitTime()
        {
          arg0 = (ns1__AVTTransitTimeRequest *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__getTransitTime() { }
        /// Friend allocator used by soap_new_ns1__getTransitTime(struct soap*, int)
        friend SOAP_FMAC1 ns1__getTransitTime * SOAP_FMAC2 soap_instantiate_ns1__getTransitTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calc.h:152 */
#ifndef SOAP_TYPE_ns1__AVTTransitTimeRequest
#define SOAP_TYPE_ns1__AVTTransitTimeRequest (12)
/* complex XSD type 'ns1:AVTTransitTimeRequest': */
class SOAP_CMAC ns1__AVTTransitTimeRequest {
      public:
        /// Required element 'ns1:OriginCity' of XSD type 'xsd:string'
        std::string OriginCity;
        /// Required element 'ns1:OriginState' of XSD type 'xsd:string'
        std::string OriginState;
        /// Required element 'ns1:OriginZip' of XSD type 'xsd:string'
        std::string OriginZip;
        /// Required element 'ns1:DestinationCity' of XSD type 'xsd:string'
        std::string DestinationCity;
        /// Required element 'ns1:DestinationState' of XSD type 'xsd:string'
        std::string DestinationState;
        /// Required element 'ns1:DestinationZip' of XSD type 'xsd:string'
        std::string DestinationZip;
        /// Optional element 'ns1:RequestType' of XSD type 'xsd:string'
        std::string *RequestType;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__AVTTransitTimeRequest
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__AVTTransitTimeRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__AVTTransitTimeRequest, default initialized and not managed by a soap context
        virtual ns1__AVTTransitTimeRequest *soap_alloc(void) const { return SOAP_NEW(ns1__AVTTransitTimeRequest); }
      public:
        /// Constructor with initializations
        ns1__AVTTransitTimeRequest()
        {
          RequestType = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__AVTTransitTimeRequest() { }
        /// Friend allocator used by soap_new_ns1__AVTTransitTimeRequest(struct soap*, int)
        friend SOAP_FMAC1 ns1__AVTTransitTimeRequest * SOAP_FMAC2 soap_instantiate_ns1__AVTTransitTimeRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calc.h:155 */
#ifndef SOAP_TYPE_ns1__getTransitTimeResponse
#define SOAP_TYPE_ns1__getTransitTimeResponse (13)
/* complex XSD type 'ns1:getTransitTimeResponse': */
class SOAP_CMAC ns1__getTransitTimeResponse {
      public:
        /// Required element 'return' of XSD type 'ns1:AVTTransitTimeResponse'
        ns1__AVTTransitTimeResponse *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__getTransitTimeResponse
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__getTransitTimeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__getTransitTimeResponse, default initialized and not managed by a soap context
        virtual ns1__getTransitTimeResponse *soap_alloc(void) const { return SOAP_NEW(ns1__getTransitTimeResponse); }
      public:
        /// Constructor with initializations
        ns1__getTransitTimeResponse()
        {
          return_ = (ns1__AVTTransitTimeResponse *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__getTransitTimeResponse() { }
        /// Friend allocator used by soap_new_ns1__getTransitTimeResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__getTransitTimeResponse * SOAP_FMAC2 soap_instantiate_ns1__getTransitTimeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calc.h:158 */
#ifndef SOAP_TYPE_ns1__AVTTransitTimeResponse
#define SOAP_TYPE_ns1__AVTTransitTimeResponse (14)
/* complex XSD type 'ns1:AVTTransitTimeResponse': */
class SOAP_CMAC ns1__AVTTransitTimeResponse {
      public:
        /// Optional element 'ns1:OrigCity' of XSD type 'xsd:string'
        std::string *OrigCity;
        /// Optional element 'ns1:OrigState' of XSD type 'xsd:string'
        std::string *OrigState;
        /// Optional element 'ns1:OrigZip' of XSD type 'xsd:string'
        std::string *OrigZip;
        /// Optional element 'ns1:origServiceCenter' of XSD type 'xsd:string'
        std::string *origServiceCenter;
        /// Optional element 'ns1:DestCity' of XSD type 'xsd:string'
        std::string *DestCity;
        /// Optional element 'ns1:DestState' of XSD type 'xsd:string'
        std::string *DestState;
        /// Optional element 'ns1:DestZip' of XSD type 'xsd:string'
        std::string *DestZip;
        /// Optional element 'ns1:destServiceCenter' of XSD type 'xsd:string'
        std::string *destServiceCenter;
        /// Optional element 'ns1:directShipment' of XSD type 'xsd:string'
        std::string *directShipment;
        /// Optional element 'ns1:EstimatedDays' of XSD type 'xsd:string'
        std::string *EstimatedDays;
        /// Optional element 'ns1:EstimatedDeliveryDate' of XSD type 'xsd:string'
        std::string *EstimatedDeliveryDate;
        /// Optional element 'ns1:Comment' of XSD type 'xsd:string'
        std::string *Comment;
        /// Optional element 'ns1:Error' of XSD type 'xsd:string'
        std::string *Error;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__AVTTransitTimeResponse
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__AVTTransitTimeResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__AVTTransitTimeResponse, default initialized and not managed by a soap context
        virtual ns1__AVTTransitTimeResponse *soap_alloc(void) const { return SOAP_NEW(ns1__AVTTransitTimeResponse); }
      public:
        /// Constructor with initializations
        ns1__AVTTransitTimeResponse()
        {
          OrigCity = (std::string *)0;
          OrigState = (std::string *)0;
          OrigZip = (std::string *)0;
          origServiceCenter = (std::string *)0;
          DestCity = (std::string *)0;
          DestState = (std::string *)0;
          DestZip = (std::string *)0;
          destServiceCenter = (std::string *)0;
          directShipment = (std::string *)0;
          EstimatedDays = (std::string *)0;
          EstimatedDeliveryDate = (std::string *)0;
          Comment = (std::string *)0;
          Error = (std::string *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__AVTTransitTimeResponse() { }
        /// Friend allocator used by soap_new_ns1__AVTTransitTimeResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__AVTTransitTimeResponse * SOAP_FMAC2 soap_instantiate_ns1__AVTTransitTimeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calc.h:475 */
#ifndef SOAP_TYPE___ns1__getTransitTime
#define SOAP_TYPE___ns1__getTransitTime (23)
/* Wrapper: */
struct SOAP_CMAC __ns1__getTransitTime {
      public:
        /** Optional element 'ns1:getTransitTime' of XSD type 'ns1:getTransitTime' */
        ns1__getTransitTime *ns1__getTransitTime_;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getTransitTime */
        int soap_type() const { return SOAP_TYPE___ns1__getTransitTime; }
        /** Constructor with member initializations */
        __ns1__getTransitTime()
        {
          ns1__getTransitTime_ = (ns1__getTransitTime *)0;
        }
        /** Friend allocator used by soap_new___ns1__getTransitTime(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__getTransitTime * SOAP_FMAC2 soap_instantiate___ns1__getTransitTime(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* calc.h:546 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (24)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        {
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* calc.h:546 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (25)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code()
        {
          SOAP_ENV__Value = (char *)0;
          SOAP_ENV__Subcode = (struct SOAP_ENV__Code *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* calc.h:546 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (27)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail()
        {
          __any = (char *)0;
          __type = 0;
          fault = NULL;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* calc.h:546 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (30)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason()
        {
          SOAP_ENV__Text = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* calc.h:546 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (31)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault()
        {
          faultcode = (char *)0;
          faultstring = (char *)0;
          faultactor = (char *)0;
          detail = (struct SOAP_ENV__Detail *)0;
          SOAP_ENV__Code = (struct SOAP_ENV__Code *)0;
          SOAP_ENV__Reason = (struct SOAP_ENV__Reason *)0;
          SOAP_ENV__Node = (char *)0;
          SOAP_ENV__Role = (char *)0;
          SOAP_ENV__Detail = (struct SOAP_ENV__Detail *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* calc.h:102 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* calc.h:102 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (17)
#endif

/* ns1__AVTTransitTimeResponse has binding name 'ns1__AVTTransitTimeResponse' for type 'ns1:AVTTransitTimeResponse' */
#ifndef SOAP_TYPE_ns1__AVTTransitTimeResponse
#define SOAP_TYPE_ns1__AVTTransitTimeResponse (14)
#endif

/* ns1__getTransitTimeResponse has binding name 'ns1__getTransitTimeResponse' for type 'ns1:getTransitTimeResponse' */
#ifndef SOAP_TYPE_ns1__getTransitTimeResponse
#define SOAP_TYPE_ns1__getTransitTimeResponse (13)
#endif

/* ns1__AVTTransitTimeRequest has binding name 'ns1__AVTTransitTimeRequest' for type 'ns1:AVTTransitTimeRequest' */
#ifndef SOAP_TYPE_ns1__AVTTransitTimeRequest
#define SOAP_TYPE_ns1__AVTTransitTimeRequest (12)
#endif

/* ns1__getTransitTime has binding name 'ns1__getTransitTime' for type 'ns1:getTransitTime' */
#ifndef SOAP_TYPE_ns1__getTransitTime
#define SOAP_TYPE_ns1__getTransitTime (11)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (31)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (30)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (27)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (25)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (24)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (33)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (32)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (26)
#endif

/* ns1__getTransitTime * has binding name 'PointerTons1__getTransitTime' for type 'ns1:getTransitTime' */
#ifndef SOAP_TYPE_PointerTons1__getTransitTime
#define SOAP_TYPE_PointerTons1__getTransitTime (20)
#endif

/* ns1__AVTTransitTimeResponse * has binding name 'PointerTons1__AVTTransitTimeResponse' for type 'ns1:AVTTransitTimeResponse' */
#ifndef SOAP_TYPE_PointerTons1__AVTTransitTimeResponse
#define SOAP_TYPE_PointerTons1__AVTTransitTimeResponse (19)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (18)
#endif

/* ns1__AVTTransitTimeRequest * has binding name 'PointerTons1__AVTTransitTimeRequest' for type 'ns1:AVTTransitTimeRequest' */
#ifndef SOAP_TYPE_PointerTons1__AVTTransitTimeRequest
#define SOAP_TYPE_PointerTons1__AVTTransitTimeRequest (15)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
