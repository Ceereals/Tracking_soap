/* soapTransitTimePortBindingProxy.cpp
   Generated by gSOAP 2.8.44 for calc.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapTransitTimePortBindingProxy.h"

TransitTimePortBindingProxy::TransitTimePortBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	TransitTimePortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

TransitTimePortBindingProxy::TransitTimePortBindingProxy(const TransitTimePortBindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

TransitTimePortBindingProxy::TransitTimePortBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	TransitTimePortBindingProxy_init(_soap->imode, _soap->omode);
}

TransitTimePortBindingProxy::TransitTimePortBindingProxy(const char *endpoint)
{	this->soap = soap_new();
	this->soap_own = true;
	TransitTimePortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

TransitTimePortBindingProxy::TransitTimePortBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	TransitTimePortBindingProxy_init(iomode, iomode);
}

TransitTimePortBindingProxy::TransitTimePortBindingProxy(const char *endpoint, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	TransitTimePortBindingProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

TransitTimePortBindingProxy::TransitTimePortBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	TransitTimePortBindingProxy_init(imode, omode);
}

TransitTimePortBindingProxy::~TransitTimePortBindingProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void TransitTimePortBindingProxy::TransitTimePortBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://webservices.averittexpress.com/TransitTimeService", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
TransitTimePortBindingProxy *TransitTimePortBindingProxy::copy()
{	TransitTimePortBindingProxy *dup = SOAP_NEW_COPY(TransitTimePortBindingProxy);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

TransitTimePortBindingProxy& TransitTimePortBindingProxy::operator=(const TransitTimePortBindingProxy& rhs)
{	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void TransitTimePortBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void TransitTimePortBindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	TransitTimePortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void TransitTimePortBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *TransitTimePortBindingProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *TransitTimePortBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *TransitTimePortBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *TransitTimePortBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int TransitTimePortBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int TransitTimePortBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void TransitTimePortBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void TransitTimePortBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *TransitTimePortBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int TransitTimePortBindingProxy::getTransitTime(const char *endpoint, const char *soap_action, ns1__getTransitTime *ns1__getTransitTime_, ns1__getTransitTimeResponse &ns1__getTransitTimeResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__getTransitTime soap_tmp___ns1__getTransitTime;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://webservices.averittexpress.com:80/TransitTimeService";
	if (soap_action == NULL)
		soap_action = "http://webservices.averittexpress.com/TransitTimeService/TransitTime/getTransitTimeRequest";
	soap_tmp___ns1__getTransitTime.ns1__getTransitTime_ = ns1__getTransitTime_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getTransitTime(soap, &soap_tmp___ns1__getTransitTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getTransitTime(soap, &soap_tmp___ns1__getTransitTime, "-ns1:getTransitTime", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getTransitTime(soap, &soap_tmp___ns1__getTransitTime, "-ns1:getTransitTime", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__getTransitTimeResponse*>(&ns1__getTransitTimeResponse_)) // NULL ref?
		return soap_closesock(soap);
	ns1__getTransitTimeResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getTransitTimeResponse_.soap_get(soap, "ns1:getTransitTimeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
